import tkinter as tk  # Importe le module tkinter pour créer une interface graphique
from tkinter import messagebox  # Importe la classe messagebox pour afficher des boîtes de dialogue
import random  # Importe le module random pour la génération de nombres aléatoires

# Paramètres du jeu
NORMAL_OBJECT_COLOR = 'green'  # Couleur des objets normaux
ANOMALY_OBJECT_COLOR = 'red'  # Couleur de l'objet anomalie
SCORE_TO_WIN = 5  # Score nécessaire pour gagner le jeu

class GameApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Anomaly Detection Game")  # Définit le titre de la fenêtre principale

        self.score = 0  # Ajout de l'attribut score
        self.score_label = tk.Label(root, text="Score: 0", font=("Helvetica", 16))  # Crée une étiquette pour afficher le score
        self.score_label.pack(pady=10)  # Place l'étiquette dans la fenêtre avec un espacement vertical de 10 pixels

        self.objects_frame = tk.Frame(root)  # Crée un cadre pour contenir les objets
        self.objects_frame.pack()  # Place le cadre dans la fenêtre

        self.result_label = tk.Label(root, text="", font=("Helvetica", 16))  # Crée une étiquette pour afficher le résultat du jeu
        self.result_label.pack(pady=10)  # Place l'étiquette dans la fenêtre avec un espacement vertical de 10 pixels

        self.generate_objects()  # Appelle la méthode pour générer les objets au lancement de l'application

    def generate_objects(self):
        self.objects = [{'color': NORMAL_OBJECT_COLOR} for _ in range(4)]  # Initialise une liste d'objets avec une couleur normale
        self.introduce_anomaly()  # Introduit un objet anomalie dans la liste d'objets

        # Nettoie les objets et les boutons précédents
        for widget in self.objects_frame.winfo_children():
            widget.destroy()

        # Crée des boutons pour les objets
        for obj in self.objects:
            button = tk.Button(self.objects_frame, text='', width=10, height=2, command=lambda o=obj: self.check_click(o))
            button.configure(bg=obj['color'])
            button.pack(side=tk.LEFT, padx=10)

    def introduce_anomaly(self):
        anomaly_index = random.randint(0, len(self.objects) - 1)  # Sélectionne aléatoirement l'index de l'objet anomalie
        self.objects[anomaly_index]['color'] = ANOMALY_OBJECT_COLOR  # Change la couleur de l'objet à la couleur d'anomalie

    def check_click(self, obj):
        if obj['color'] == ANOMALY_OBJECT_COLOR:
            self.increase_score()
        else:
            self.end_game()

    def increase_score(self):
        self.score += 1
        self.score_label.config(text=f"Score: {self.score}")
        if self.score == SCORE_TO_WIN:
            self.end_game(win=True)
        else:
            self.generate_objects()

    def end_game(self, win=False):
        if win:
            self.result_label.config(text="Félicitations ! Vous avez gagné.")
        else:
            self.result_label.config(text="Fin du jeu. Vous avez perdu.")
        self.score = 0
        self.score_label.config(text="Score: 0")
        self.generate_objects()

if __name__ == "__main__":
    root = tk.Tk()  # Crée la fenêtre principale
    app = GameApp(root)  # Crée une instance de la classe GameApp
    root.mainloop()  # Lance la boucle principale de l'interface graphique
